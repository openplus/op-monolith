<?php

/*
 * Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see https://ckeditor.com/legal/ckeditor-oss-license
 */

/**
 * @file
 * Implements hooks for the CKEditor 5 Premium Features module.
 */

declare(strict_types=1);

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\ckeditor5\Plugin\CKEditor5PluginDefinition;
use Drupal\ckeditor5_premium_features\Utility\Html;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\ckeditor5_premium_features\Utility\LibraryDefinitionItem;
use Drupal\ckeditor5_premium_features\EditorXssFilter\CollaborationXSSFilter;
use Drupal\filter\FilterFormatInterface;

/**
 * Implements hook_help().
 */
function ckeditor5_premium_features_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ckeditor5_premium_features':
      $text = file_get_contents(__DIR__ . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
      // @todo Load text from Readme.md.
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The CKEditor Premium Features, see <a href=":doc_url">online documentation for the CKEditor Premium Features</a>.', [':doc_url' => 'https://ckeditor.com/docs/trial/latest/guides/overview.html']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_library_info_build().
 */
function ckeditor5_premium_features_library_info_build(): array {
  /** @var \Drupal\ckeditor5_premium_features\Config\SettingsConfigHandlerInterface $config_handler */
  $config_handler = \Drupal::service('ckeditor5_premium_features.config_handler.settings');

  $libraries = [
    'ckeditor5-collaboration-dll',
    'cloud-services',
  ];

  $definitions = [];

  foreach ($libraries as $library) {
    $definition = new LibraryDefinitionItem($library, $config_handler->getDllLocation());
    $definition->addRemoteJs($definition->id());

    $definitions[$definition->id()] = $definition->getDefinition();
  }

  return $definitions;
}

/**
 * Implements hook_editor_xss_filter_alter().
 */
function ckeditor5_premium_features_editor_xss_filter_alter(
  &$editor_xss_filter_class,
  FilterFormatInterface $format,
  FilterFormatInterface $original_format = NULL) {
  $editor_xss_filter_class = CollaborationXSSFilter::class;
}

/**
 * Implements hook_library_info_alter().
 */
function ckeditor5_premium_features_library_info_alter(&$libraries, $extension) {
  // We don't need disableGhsTableIntegration.js for ckeditor5 >35.4.0.
  if ($extension == 'ckeditor5_premium_features') {
    if (\Drupal::service('ckeditor5_premium_features.core_library_version_checker')->isLibraryVersionHigherOrEqual('35.4.0')) {
      unset($libraries["collaboration-integration-base"]["js"]["js/build/disableGhsTableIntegration.js"]);
    }
  }

  // @todo Change this to use `after` instead of `dependencies` after https://www.drupal.org/project/drupal/issues/1945262 is released.
  if ($extension === 'claro' && isset($libraries['node-form'])) {
    $cke5PremiumFeaturesSettings = \Drupal::configFactory()->get('ckeditor5_premium_features.settings');
    if ($cke5PremiumFeaturesSettings->get('alter_node_form_css')) {
      $libraries['node-form']['dependencies'][] = 'ckeditor5_premium_features/claro--override--node-form';
    }
  }
}

/**
 * Implements hook_ckeditor5_plugin_info_alter().
 */
function ckeditor5_premium_features_ckeditor5_plugin_info_alter(array &$plugin_definitions) {
  // In order to safely remove disableGhsTableIntegration.js we have to alter
  // CKEditor5 plugin that wa using this file.
  if (\Drupal::service('ckeditor5_premium_features.core_library_version_checker')->isLibraryVersionHigherOrEqual('35.4.0')) {
    $definition = $plugin_definitions["ckeditor5_premium_features__collaboration_integration_base"];
    $definition_array = $definition->toArray();

    $key = array_search(
      'disableGhsTableIntegration.DisableGhsTableIntegration',
      $definition_array["ckeditor5"]["plugins"]
    );

    if (is_numeric($key)) {
      unset($definition_array["ckeditor5"]["plugins"][$key]);
      $new_definition = new CKEditor5PluginDefinition($definition_array);
      $plugin_definitions["ckeditor5_premium_features__collaboration_integration_base"] = $new_definition;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ckeditor5_premium_features_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, ['library_info_alter', 'ckeditor5_plugin_info_alter'])) {
    // Make sure this module's implementations are executed in the end.
    if (isset($implementations["ckeditor5_premium_features"])) {
      unset($implementations["ckeditor5_premium_features"]);
      $implementations["ckeditor5_premium_features"] = FALSE;
    }
  }
}

/**
 * Implements hook_js_settings_alter().
 */
function ckeditor5_premium_features_js_settings_alter(array &$settings, AttachedAssetsInterface $assets) {
  $moduleHandler = \Drupal::service('module_handler');
  $settings["ckeditor5Premium"]["isMediaInstalled"] = $moduleHandler->moduleExists('media');
}

/**
 * Implements hook_filter_format_disable().
 */
function ckeditor5_premium_features_filter_format_disable(FilterFormatInterface $format) {
  // Revoke all collaboration permissions after text format is disabled.
  /** @var \Drupal\ckeditor5_premium_features\Utility\PermissionHelper $permissionHelper */
  $permissionHelper = \Drupal::service('ckeditor5_premium_features.permission_helper');
  $permissionHelper->deleteCollaborationPermissions($format);
}

/**
 * Implements hook_theme().
 */
function ckeditor5_premium_features_theme($existing, $type, $theme, $path): array {
  return [
    'ckeditor5_textarea' => [
      'render element' => 'element',
      'template' => 'ckeditor5-textarea'
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ckeditor5_premium_features_preprocess_ckeditor5_textarea(&$variables): void {
  template_preprocess_textarea($variables);
  $element = $variables['element'];
  $variables['sidebar'] = !empty($element['#sidebar']) ? $element['#sidebar'] : NULL;
  $variables['document_outline'] = !empty($element['#document_outline']) ? $element['#document_outline'] : NULL;
}
