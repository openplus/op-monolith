<?php

/*
 * Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see https://ckeditor.com/legal/ckeditor-oss-license
 */

/**
 * @file
 * Contains CKEditor 5 Premium Features Realtime module functions.
 */

declare(strict_types = 1);

use Drupal\ckeditor5_premium_features\Utility\LibraryDefinitionItem;
use Drupal\ckeditor5_premium_features_productivity_pack\Element\TextFormat as TextFormatProductivityPack;
use Drupal\ckeditor5_premium_features_realtime_collaboration\Element\TextFormat;
use Drupal\ckeditor5_premium_features_realtime_collaboration\Entity\ChannelInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_library_info_build().
 */
function ckeditor5_premium_features_realtime_collaboration_library_info_build(): array {
  /** @var \Drupal\ckeditor5_premium_features\Config\SettingsConfigHandlerInterface $config_handler */
  $config_handler = \Drupal::service('ckeditor5_premium_features.config_handler.settings');

  $libraries = [
    'real-time-collaboration',
    'comments',
    'revision-history',
    'track-changes',
  ];

  $definitions = [];

  foreach ($libraries as $library) {
    $definition = new LibraryDefinitionItem($library, $config_handler->getDllLocation());
    $definition->addRemoteJs($definition->id());

    $definitions[$definition->id()] = $definition->getDefinition();
  }

  return $definitions;
}

/**
 * Implements hook_element_info_alter().
 */
function ckeditor5_premium_features_realtime_collaboration_element_info_alter(array &$info): void {
  if (isset($info['text_format'])) {
    $moduleHandler = \Drupal::service('module_handler');
    $isOrderChanged = FALSE;
    if ($moduleHandler->moduleExists('ckeditor5_premium_features_productivity_pack')) {
      $isOrderChanged = ckeditor5_premium_features_realtime_collaboration_validate_text_format_order($info);
    }
    if (!$isOrderChanged) {
      $info['text_format']['#process'][] = [TextFormat::class, 'process'];
    }
  }
}

/**
 * Extra check to make sure that the productivity pack is loaded after rtc module.
 *
 * @param array $info
 *   Info array.
 *
 * @return bool
 *   TRUE if order has been changed.
 */
function ckeditor5_premium_features_realtime_collaboration_validate_text_format_order(array &$info):bool {
  if (isset($info['text_format']['#process'])) {
    foreach ($info['text_format']['#process'] as $key => $process) {
      if (current($process) === TextFormatProductivityPack::class) {
        $info['text_format']['#process'][$key] = [TextFormat::class, 'process'];
        $info['text_format']['#process'][] = $process;
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_entity_delete().
 *
 * Remove ckeditor5_channel entities after parent entity is deleted.
 */
function ckeditor5_premium_features_realtime_collaboration_entity_delete(EntityInterface $entity): void {
  ckeditor5_premium_features_realtime_collaboration_remove_channels_entities($entity);
}

/**
 * Implements hook_entity_translation_delete().
 *
 * Remove ckeditor5_channel entities after parent translation entity is deleted.
 */
function ckeditor5_premium_features_realtime_collaboration_entity_translation_delete(EntityInterface $translation): void {
  ckeditor5_premium_features_realtime_collaboration_remove_channels_entities($translation, TRUE);
}

/**
 * Removes all channels entities related to the entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param bool $is_translation
 *   Flag for removing translation.
 */
function ckeditor5_premium_features_realtime_collaboration_remove_channels_entities(EntityInterface $entity, bool $is_translation = FALSE): void {
  $uuid = $entity->uuid();

  if (!$uuid) {
    return;
  }

  if ($entity instanceof ChannelInterface) {
    return;
  }

  $storage = Drupal::entityTypeManager()
    ->getStorage(ChannelInterface::ENTITY_TYPE_ID);

  $query = $storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('entity_id', $uuid);

  if ($is_translation) {
    $langcode = $entity->language()->getId();
    $query->condition('langcode', $langcode);
  }

  $ids = $query->execute();

  if (!$ids) {
    return;
  }

  $entities = $storage->loadMultiple($ids);
  $storage->delete($entities);
}
